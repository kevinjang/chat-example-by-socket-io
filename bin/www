#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat-example-by-socket-io:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);


io.on('connection', function (socket) {
  console.log('a user connected');
  socket.on('news', function(data){
    console.log('news data:', data);
  })
  socket.emit('news', { hello: 'world' });
});
  // socket.emit('news', {hello: 'world'});
  // socket.on('my other event', function(data){
  //   console.log('my other event data:'+data);
  // });

  // io.emit('this', { will: 'be received by everyone' });
  // socket.on('private message', function(from, msg){
  //   console.log('I received a private message by ' ,from , ' saying ', msg);
  // });

  // socket.on('disconnect', function(){
  //   io.emit('user disconnected');
  // });
  // sending and getting data(acknowledgements)
  /** 
   * Sometimes, you might want to get a callback when the client confirmed the message reception.
   * To do this, simply pass a function as the last parameter 
   * of  .send or .emit.
   * What's more, when you use .emit, the acknowledge 
   * is done by you, which means you can also pass data along:
  */
  // socket.on('ferret', function (name, word, fn) {
  //   fn(name + ' says ' + word);
  // });

  
// });
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
